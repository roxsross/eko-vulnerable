name: eko-pipeline-security-tab

on:
  push:
    branches:
      - master

jobs:
  init:
    name: Install Dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Install dependencies
        run: npm install

  secrets:
    name: Secrets Security Scan
    runs-on: ubuntu-latest
    needs: [init]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Scan with Gitleaks
        run: |
          docker run --rm \
            -v "$(pwd):/pwd" \
            zricethezav/gitleaks:latest \
            detect \
            --verbose \
            --source="/pwd" \
            --report-format=json \
            --report-path=/pwd/gitleaks-result.json \
            --log-level=debug \
            --config=/pwd/.gitleaks.toml
        continue-on-error: true
      - name : Upload Gitleaks report
        uses: actions/upload-artifact@v4
        with:
          name: gitleaks-json-reports
          path: gitleaks-result.json
  sca:
    runs-on: ubuntu-latest
    name: Sca Security Scan
    needs: [init]
    steps:
      - name: Checkout action
        uses: actions/checkout@v4     
      - name: Snyk SCA Analysis
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --json-file-output=snyk-results.json
        continue-on-error: true
      - name: Upload Snyk results
        uses: actions/upload-artifact@v4
        with:
          name: snyk-json-reports
          path: snyk-results.json

  sast:
    runs-on: ubuntu-latest
    name: Sast Security Scan
    container:
      image: returntocorp/semgrep
    needs: [init]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: full scan
        run: |
          semgrep \
          --json --output report.json \
          --metrics=off \
          --config="p/javascript"
      - name: Upload Semgrep results
        uses: actions/upload-artifact@v4
        with:
          name: semgrep-json-results
          path: report.json

  container-scan:
    runs-on: ubuntu-latest
    name: Container Security Scan
    needs: init
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: docker build -t app-image:${{ github.sha }} .

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        env:
          TRIVY_DB_REPOSITORY: ghcr.io/aquasecurity/trivy-db,public.ecr.aws/aquasecurity/trivy-db
        with:
          image-ref: 'app-image:${{ github.sha }}'
          format: 'json'
          output: 'trivy-results.json'
          severity: 'CRITICAL,HIGH'
      - name: Upload Trivy results
        uses: actions/upload-artifact@v4
        with:
          name: trivy-json-results
          path: trivy-results.json

  upload_dojo:
    needs: [secrets, sca, sast, container-scan]
    runs-on: ubuntu-latest
    env:
      DEFECTDOJO_TOKEN: ${{ secrets.DEFECTDOJO_TOKEN }}
      DEFECTDOJO_URL: ${{ vars.DEFECTDOJO_URL || 'https://demo.defectdojo.org' }}
      DEFECTDOJO_ENGAGEMENT_ID: ${{ vars.DEFECTDOJO_ENGAGEMENT_ID || '23' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'
      - name: install python dependencies
        run: |
          pip install requests
      - name: download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./scan-results
      - name: list downloaded artifacts
        run: |
          echo "Downloaded artifacts:"
          find ./scan-results -type f -name "*.json" -o -name "*.xml"
      - name: Upload to OWASP Defectdojo 
        run: |
          python .github/scripts/eko-upload-result.py ./scan-results/gitleaks-json-reports/gitleaks-result.json
          python .github/scripts/eko-upload-result.py ./scan-results/snyk-json-reports/snyk-results.json
          python .github/scripts/eko-upload-result.py ./scan-results/semgrep-json-results/report.json
          python .github/scripts/eko-upload-result.py ./scan-results/trivy-json-results/trivy-results.json
  
  build_to_hub:
    runs-on: ubuntu-latest
    needs: [container-scan, upload_dojo]
    env:
      REPOSITORY: ${{ github.event.repository.name }}
      REGISTRY: ${{ secrets.DOCKER_USERNAME }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push docker
        run: |
          docker build -t $REGISTRY/$REPOSITORY .
          docker push $REGISTRY/$REPOSITORY
  deploy:
    runs-on: ubuntu-latest
    needs: [build_to_hub]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: copy docker-compose to server ec2
        uses: appleboy/scp-action@v1
        with:
          host: ${{ secrets.AWS_IP_EC2 }}
          username: ${{ secrets.AWS_USER_EC2 }}
          key: ${{ secrets.AWS_EC2 }}
          port: ${{ secrets.AWS_PORT_EC2 }}
          source: "docker-compose.yml"
          target: "ec2-user"
      - name: conect remote ssh to server ec2
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.AWS_IP_EC2 }}
          username: ${{ secrets.AWS_USER_EC2 }}
          key: ${{ secrets.AWS_EC2 }}
          port: ${{ secrets.AWS_PORT_EC2 }}
          script: |
            cd ec2-user
            docker-compose --version
            docker-compose up -d
 
  security_dast: 
    runs-on: ubuntu-latest
    needs: [deploy]
    env:
      DEFECTDOJO_TOKEN: ${{ secrets.DEFECTDOJO_TOKEN }}
      DEFECTDOJO_URL: ${{ vars.DEFECTDOJO_URL || 'https://demo.defectdojo.org' }}
      DEFECTDOJO_ENGAGEMENT_ID: ${{ vars.DEFECTDOJO_ENGAGEMENT_ID || '23' }}
    timeout-minutes: 45
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'
      - name: install python dependencies
        run: |
          pip install requests        

      - name: Run OWASP ZAP DAST scan
        run: |
          docker run -u root --rm \
          -v $(pwd):/zap/wrk/:rw \
          ghcr.io/zaproxy/zaproxy:stable zap-full-scan.py \
          -t http://${{ secrets.AWS_IP_EC2 }}:3000 \
          -x zap-results.xml \
          -J zap-results.json \
          -w zap-report.html
        continue-on-error: true
      - name: Upload ZAP results
        uses: actions/upload-artifact@v4
        with:
            name: zap-scan-results
            path: |
              zap-results.xml
              zap-results.json
              zap-report.html
            retention-days: 7
      - name: Upload to OWASP Defectdojo 
        run: |
          python .github/scripts/eko-upload-result.py zap-results.xml
